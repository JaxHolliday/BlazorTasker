@page "/tasker"
@using System.Text.Json
@using System.Text.Json.Serialization 
@inject IJSRuntime JS;

@*  System.Text.Json: Used to serialize/deserialize taskerItems to/from JSON format.
    IJSRuntime: Allows calling JavaScript functions like localStorage directly from Blazor.
 *@

<div class="d-flex align-items-center justify-content-center">
    <div class="task p-5">
        <div class="p-2 text-center mb-3">
            <img src="/img/mw1920_image.png" width="300" />
        </div>
        <div>
            <EditForm Model="ti" OnValidSubmit="addTask">
                <DataAnnotationsValidator />
                <div class="d-flex flex-row gap-2">
                    <InputText class="form-control" placeholder="Enter a task" @bind-Value="ti.Name" />
                    <button type="submit" class="btn btn-primary">Add</button>
                </div>
                <div>
                    <ValidationMessage For="() => ti.Name" />
                </div>
            </EditForm>
        </div>
        <hr />
        <div class="vstack">
            @foreach (var lineItem in taskerItems)
            {
                <TaskerLine Item="lineItem" OnDeleteCallBack="@deleteTask" />
            }
        </div>
    </div>
</div>

@code {
    private TaskerItem ti = new();
    private List<TaskerItem> taskerItems = new();

    protected override async Task OnInitializedAsync()
    {
        ///load in the items from local storage

    }

    private async void addTask()
    {
        ti.Id = Guid.NewGuid();  // Assign a unique ID to the task.
        taskerItems.Add(ti);     // Add the task to the list.
        ti = new();              // Reset ti for a new input.
        await SaveListAsync();  // Save the updated list to local storage.
    }

    private async void deleteTask(TaskerItem item)
    {
        taskerItems.Remove(item);  // Remove the task from the list.
    }

    private async Task SaveListAsync()
    {
        // Convert the taskerItems list to JSON format.
        string? taskerItemsJson = JsonSerializer.Serialize(taskerItems);
        //call js function to save the taskerItemsJson to local storage.
        await JS.InvokeVoidAsync("localStorage.setItem", "taskerList", taskerItemsJson);
    }

    private async Task LoadListAsync()
    {
        try
        {
            // Retrieve the JSON string from local storage.
            string? taskerItemsJson = await JS.InvokeAsync<string>("localStorage.getItem", "taskerList") ?? "[]";
            // Deserialize the JSON string back into a list of TaskerItem objects.
            taskerItems = JsonSerializer.Deserialize<List<TaskerItem>>(taskerItemsJson) ?? new List<TaskerItem>();
        }
        catch (Exception ex)
        {
            // Handle exceptions, such as JSON deserialization errors.
            Console.WriteLine($"Error loading tasker items: {ex.Message}");
        }
    }

    private void updateTask(TaskerItem item)
    {
        // save item to local storage.
    }

}